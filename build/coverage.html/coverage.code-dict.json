{"/home/travis/build/npmtest/node-npmtest-node-gcm/test.js":"/* istanbul instrument in package npmtest_node_gcm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-gcm/lib.npmtest_node_gcm.js":"/* istanbul instrument in package npmtest_node_gcm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_gcm = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_gcm = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-gcm/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-gcm && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_gcm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_gcm\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_gcm.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_gcm.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_gcm.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_gcm.__dirname + '/lib.npmtest_node_gcm.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-gcm/node_modules/node-gcm/index.js":"/*!\n * node-gcm\n * Copyright(c) 2013 Marcus Farkas <toothlessgear@finitebox.com>\n * MIT Licensed\n */\n \nmodule.exports = require('./lib/node-gcm');\n","/home/travis/build/npmtest/node-npmtest-node-gcm/node_modules/node-gcm/lib/node-gcm.js":"/*!\n * node-gcm\n * Copyright(c) 2013 Marcus Farkas <toothlessgear@finitebox.com>\n * MIT Licensed\n */\n\nexports.Constants = require('./constants');\nexports.Message = require('./message');\nexports.Result = require('./result');\nexports.MulitcastResult = require('./multicastresult');\nexports.Sender = require('./sender');\n","/home/travis/build/npmtest/node-npmtest-node-gcm/node_modules/node-gcm/lib/constants.js":"var Constants = {\n    'GCM_SEND_ENDPOINT' : 'fcm.googleapis.com',\n    'GCM_SEND_ENDPATH' : '/fcm/send',\n    'GCM_SEND_URI' : 'https://fcm.googleapis.com/fcm/send',\n    'BACKOFF_INITIAL_DELAY' : 1000,\n    'MAX_BACKOFF_DELAY' : 1024000  ,\n    'SOCKET_TIMEOUT' : 180000, //three minutes\n\n    /** DEPRECATED **/\n\n    'TOKEN_MESSAGE_ID' : 'id',\n    'TOKEN_CANONICAL_REG_ID' : 'registration_id',\n    'TOKEN_ERROR' : 'Error',\n    'JSON_REGISTRATION_IDS' : 'registration_ids',\n    'JSON_PAYLOAD' : 'data',\n    'JSON_NOTIFICATION' : 'notification',\n    'JSON_SUCCESS' : 'success',\n    'JSON_FAILURE' : 'failure',\n    'JSON_CANONICAL_IDS' : 'canonical_ids',\n    'JSON_MULTICAST_ID' : 'multicast_id',\n    'JSON_RESULTS' : 'results',\n    'JSON_ERROR' : 'error',\n    'JSON_MESSAGE_ID' : 'message_id',\n    'UTF8' : 'UTF-8',\n\n    //These errors could probably be structured more nicely, and could be used in the code.\n    // -- maybe just as an Error abstraction?\n    'ERROR_QUOTA_EXCEEDED' : 'QuotaExceeded',\n    'ERROR_DEVICE_QUOTA_EXCEEDED' : 'DeviceQuotaExceeded',\n    'ERROR_MISSING_REGISTRATION' : 'MissingRegistration',\n    'ERROR_INVALID_REGISTRATION' : 'InvalidRegistration',\n    'ERROR_MISMATCH_SENDER_ID' : 'MismatchSenderId',\n    'ERROR_NOT_REGISTERED' : 'NotRegistered',\n    'ERROR_MESSAGE_TOO_BIG' : 'MessageTooBig',\n    'ERROR_MISSING_COLLAPSE_KEY' : 'MissingCollapseKey',\n    'ERROR_UNAVAILABLE' : 'Unavailable'\n\n    /** END DEPRECATED **/\n};\n\nmodule.exports = Constants;\n","/home/travis/build/npmtest/node-npmtest-node-gcm/node_modules/node-gcm/lib/message.js":"var messageOptions = require(\"./message-options\");\n\nfunction Message(raw) {\n    if (!(this instanceof Message)) {\n        return new Message(raw);\n    }\n    this.params = cleanParams(raw || {});\n}\n\nfunction cleanParams(raw) {\n    var params = {};\n    Object.keys(raw).forEach(function(param) {\n        if(messageOptions[param]) {\n            params[param] = raw[param];\n        }\n    });\n    return params;\n}\n\nMessage.prototype.addNotification = function() {\n    return handleParamSet.call(this, arguments, \"notification\");\n};\n\nfunction handleParamSet(args, paramType) {\n    if(args.length == 1) {\n        return setParam.call(this, paramType, args[0]);\n    }\n    if(args.length == 2) {\n        return addParam.call(this, paramType, args[0], args[1]);\n    }\n    throw new Error(\"Invalid number of arguments given to for setting \" + paramType + \" (\" + args.length + \")\");\n}\n\nfunction setParam(paramType, obj) {\n    if (typeof obj === 'object' && Object.keys(obj).length > 0) {\n        this.params[paramType] = obj;\n    }\n}\n\nfunction addParam(paramType, key, value) {\n    if(!this.params[paramType]) {\n        this.params[paramType] = {};\n    }\n    return this.params[paramType][key] = value;\n}\n\nMessage.prototype.addData = function() {\n    return handleParamSet.call(this, arguments, \"data\");\n};\n\nMessage.prototype.toJson = function() {\n    var json = {};\n\n    Object.keys(this.params).forEach(function(param) {\n        var optionDescription = messageOptions[param];\n        if(!optionDescription) {\n            return;\n        }\n        var key = optionDescription.__argName || param;\n        json[key] = this.params[param];\n    }.bind(this));\n\n    return json;\n};\n\n/** DEPRECATED */\n\nMessage.prototype.addDataWithKeyValue = function (key, value) {\n    console.warn(\"Message#addDataWithKeyValue has been deprecated. Please use Message#addData instead.\");\n    this.addData(key, value);\n};\n\nMessage.prototype.addDataWithObject = function (obj) {\n    console.warn(\"Message#addDataWithObject has been deprecated. Please use Message#addData instead.\");\n    this.addData(obj);\n};\n\n/** END DEPRECATED */\n\nmodule.exports = Message;\n","/home/travis/build/npmtest/node-npmtest-node-gcm/node_modules/node-gcm/lib/message-options.js":"/**\n * This module defines all the arguments that may be passed to a message.\n * \n * Each argument may contain a field `__argName`, if the name of the field\n * should be different when sent to the server.\n * \n * The argument may also contain a field `__argType`, if the given\n * argument must be of that type. The types are the strings resulting from\n * calling `typeof <arg>` where `<arg>` is the argument.\n * \n * Other than that, the arguments are expected to follow the indicated\n * structure.\n */\n\nmodule.exports = {\n\tcollapseKey: {\n        __argName: \"collapse_key\",\n        __argType: \"string\"\n    },\n    priority: {\n        __argType: \"string\"\n    },\n    contentAvailable: {\n        __argName: \"content_available\",\n        __argType: \"boolean\"\n    },\n    mutableContent: {\n        __argName: \"mutable_content\",\n        __argType: \"boolean\"\n    },\n\tdelayWhileIdle: {\n        __argName: \"delay_while_idle\",\n        __argType: \"boolean\"\n    },\n    timeToLive: {\n        __argName: \"time_to_live\",\n        __argType: \"number\"\n    },\n    restrictedPackageName: {\n        __argName: \"restricted_package_name\",\n        __argType: \"string\"\n    },\n    dryRun: {\n        __argName: \"dry_run\",\n        __argType: \"boolean\"\n    },\n    data: {\n        __argType: \"object\"\n    },\n    notification: {\n        __argType: \"object\"\n        //TODO: There are a lot of very specific arguments that could\n        //      be indicated here.\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-node-gcm/node_modules/node-gcm/lib/result.js":"/** DEPRECATED **/\n\nfunction Result() {\n    this.messageId = undefined;\n    this.canonicalRegistrationId = undefined;\n    this.errorCode = undefined;\n\n    console.warn(\"You are using node-gcm Result which is deprecated\");\n}\n\nmodule.exports = Result;\n\n/** END DEPRECATED **/\n","/home/travis/build/npmtest/node-npmtest-node-gcm/node_modules/node-gcm/lib/multicastresult.js":"/** DEPRECATED **/\n\nfunction MulitcastResult() {\n    if (!(this instanceof MulitcastResult)) {\n        return new MulitcastResult();\n    }\n\n    console.warn(\"You are using node-gcm MulticastResult, which is deprecated.\");\n\n    this.success = undefined;\n    this.failure = undefined;\n    this.canonicalIds = undefined;\n    this.multicastId = undefined;\n    this.results = [];\n    this.retryMulticastIds = [];\n}\n\nMulitcastResult.prototype.addResult = function (result) {\n    this.results.push(result);\n};\n\nMulitcastResult.prototype.getTotal = function () {\n    return this.success + this.failure;\n};\n\nmodule.exports = MulitcastResult;\n\n/** END DEPRECATED **/\n","/home/travis/build/npmtest/node-npmtest-node-gcm/node_modules/node-gcm/lib/sender.js":"var Constants = require('./constants');\nvar _ = require('lodash');\nvar request = require('request');\nvar debug = require('debug')('node-gcm');\n\nfunction Sender(key, options) {\n    if (!(this instanceof Sender)) {\n        return new Sender(key, options);\n    }\n\n    this.key = key;\n    this.options = options || {};\n}\n\nSender.prototype.send = function(message, recipient, options, callback) {\n    if(typeof options == \"function\") {\n        callback = options;\n        options = null;\n    }\n    else if(!callback) {\n        callback = function() {};\n    }\n    options = cleanOptions(options);\n\n    if(message.params && message.params.data && message.params.data.from) {\n        console.warn(\"Sending a notification with the 'from' data attribute may invoke a 400 Bad Request by FCM.\");\n    }\n\n    if(options.retries == 0) {\n        return this.sendNoRetry(message, recipient, callback);\n    }\n\n    var self = this;\n\n    this.sendNoRetry(message, recipient, function(err, response, attemptedRegTokens) {\n        if (err) {\n            // Attempt to determine HTTP status code\n            var statusCode = typeof err === 'number' ? err : (err.code || 0);\n\n            // 4xx error?\n            if (statusCode > 399 && statusCode < 500) {\n                debug(\"Error 4xx -- no use retrying. Something is wrong with the request (probably authentication?)\");\n                return callback(err);\n            }\n            return retry(self, message, recipient, options, callback);\n        }\n        if(!response.results) {\n            return callback(null, response);\n        }\n        checkForBadTokens(response.results, attemptedRegTokens, function(err, unsentRegTokens, regTokenPositionMap) {\n            if(err) {\n                return callback(err);\n            }\n            if (unsentRegTokens.length == 0) {\n                return callback(null, response);\n            }\n\n            debug(\"Retrying \" + unsentRegTokens.length + \" unsent registration tokens\");\n\n            retry(self, message, unsentRegTokens, options, function(err, retriedResponse) {\n                if(err) {\n                    return callback(null, response);\n                }\n                response = updateResponse(response, retriedResponse, regTokenPositionMap, unsentRegTokens);\n                callback(null, response);\n            });\n        });\n    });\n};\n\nfunction cleanOptions(options) {\n    if(!options || typeof options != \"object\") {\n        var retries = 5;\n        if(typeof options == \"number\") {\n            retries = options;\n        }\n        return {\n            retries: retries,\n            backoff: Constants.BACKOFF_INITIAL_DELAY\n        };\n    }\n\n    if(typeof options.retries != \"number\") {\n        options.retries = 5;\n    }\n    if(typeof options.backoff != \"number\") {\n        options.backoff = Constants.BACKOFF_INITIAL_DELAY;\n    }\n    if (options.backoff > Constants.MAX_BACKOFF_DELAY) {\n        options.backoff = Constants.MAX_BACKOFF_DELAY;\n    }\n\n    return options;\n}\n\nfunction retry(self, message, recipient, options, callback) {\n    return setTimeout(function() {\n        self.send(message, recipient, {\n            retries: options.retries - 1,\n            backoff: options.backoff * 2\n        }, callback);\n    }, options.backoff);\n}\n\nfunction checkForBadTokens(results, originalRecipients, callback) {\n    var unsentRegTokens = [];\n    var regTokenPositionMap = [];\n    for (var i = 0; i < results.length; i++) {\n        if (results[i].error === 'Unavailable') {\n            regTokenPositionMap.push(i);\n            unsentRegTokens.push(originalRecipients[i]);\n        }\n    }\n    nextTick(callback, null, unsentRegTokens, regTokenPositionMap);\n}\n\nfunction updateResponse(response, retriedResponse, regTokenPositionMap, unsentRegTokens) {\n    updateResults(response.results, retriedResponse.results, regTokenPositionMap);\n    updateResponseMetaData(response, retriedResponse, unsentRegTokens);\n    return response;\n}\n\nfunction updateResults(results, retriedResults, regTokenPositionMap) {\n    for(var i = 0; i < results.length; i++) {\n        results[regTokenPositionMap[i]] = retriedResults[i];\n    }\n}\n\nfunction updateResponseMetaData(response, retriedResponse, unsentRegTokens) {\n    response.success += retriedResponse.success;\n    response.canonical_ids += retriedResponse.canonical_ids;\n    response.failure -= unsentRegTokens.length - retriedResponse.failure;\n}\n\nSender.prototype.sendNoRetry = function(message, recipient, callback) {\n    if(!callback) {\n        callback = function() {};\n    }\n\n    getRequestBody(message, recipient, function(err, body) {\n        if(err) {\n            return callback(err);\n        }\n\n        //Build request options, allowing some to be overridden\n        var request_options = _.defaultsDeep({\n            method: 'POST',\n            headers: {\n                'Authorization': 'key=' + this.key\n            },\n            uri: Constants.GCM_SEND_URI,\n            json: body\n        }, this.options, {\n            timeout: Constants.SOCKET_TIMEOUT\n        });\n\n        request(request_options, function (err, res, resBodyJSON) {\n            if (err) {\n                return callback(err);\n            }\n            if (res.statusCode >= 500) {\n                debug('GCM service is unavailable (500)');\n                return callback(res.statusCode);\n            }\n            if (res.statusCode === 401) {\n                debug('Unauthorized (401). Check that your API token is correct.');\n                return callback(res.statusCode);\n            }\n            if (res.statusCode !== 200) {\n                debug('Invalid request (' + res.statusCode + '): ' + resBodyJSON);\n                return callback(res.statusCode);\n            }\n            if (!resBodyJSON) {\n                debug('Empty response received (' + res.statusCode + ' ' + res.statusMessage + ')');\n                // Spoof error code 400 to avoid retrying the request\n                return callback({error: res.statusMessage, code: 400});\n            }\n            callback(null, resBodyJSON, body.registration_ids || [ body.to ]);\n        });\n    }.bind(this));\n};\n\nfunction getRequestBody(message, recipient, callback) {\n    var body = message.toJson();\n\n    if(typeof recipient == \"string\") {\n        body.to = recipient;\n        return nextTick(callback, null, body);\n    }\n    if(Array.isArray(recipient)) {\n        if(!recipient.length) {\n            return nextTick(callback, 'No recipient provided!');\n        }\n        else if(recipient.length == 1) {\n            body.to = recipient[0];\n            return nextTick(callback, null, body);\n        }\n        body.registration_ids = recipient;\n        return nextTick(callback, null, body);\n    }\n    if (typeof recipient == \"object\") {\n        return extractRecipient(recipient, function(err, recipient) {\n            if(err) {\n                return callback(err);\n            }\n            if (Array.isArray(recipient)) {\n                body.registration_ids = recipient;\n                return callback(null, body);\n            }\n            if ((/\\|\\||&&/).test(recipient)) {\n              body.condition = recipient;\n              return callback(null, body);\n            }\n            body.to = recipient;\n            return callback(null, body);\n        });\n    }\n    return nextTick(callback, 'Invalid recipient (' + recipient + ', type ' + typeof recipient + ') provided!');\n}\n\nfunction nextTick(func) {\n    var args = Array.prototype.slice.call(arguments, 1);\n    process.nextTick(function() {\n        func.apply(this, args);\n    }.bind(this));\n}\n\nfunction extractRecipient(recipient, callback) {\n    var recipientKeys = Object.keys(recipient);\n\n    if(recipientKeys.length !== 1) {\n        return nextTick(callback, new Error(\"Please specify exactly one recipient key (you specified [\" + recipientKeys + \"])\"));\n    }\n\n    var key = recipientKeys[0];\n    var value  = recipient[key];\n\n    if(!value) {\n        return nextTick(callback, new Error(\"Falsy value for recipient key '\" + key + \"'.\"));\n    }\n\n    var keyValidators = {\n        to: isString,\n        topic: isString,\n        condition: isString,\n        notificationKey: isString,\n        registrationIds: isArray,\n        registrationTokens: isArray\n    };\n\n    var validator = keyValidators[key];\n    if(!validator) {\n        return nextTick(callback, new Error(\"Key '\" + key + \"' is not a valid recipient key.\"));\n    }\n    if(!validator(value)) {\n        return nextTick(callback, new Error(\"Recipient key '\" + key + \"' was provided as an incorrect type.\"));\n    }\n\n    return nextTick(callback, null, value);\n}\n\nfunction isString(x) {\n    return typeof x == \"string\";\n}\n\nfunction isArray(x) {\n    return Array.isArray(x);\n}\n\nmodule.exports = Sender;\n"}